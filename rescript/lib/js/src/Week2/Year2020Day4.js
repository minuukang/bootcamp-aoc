// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("rescript/lib/js/curry.js");
var Process = require("process");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");

var _map = {"amb":"amb","blu":"blu","brn":"brn","gry":"gry","grn":"grn","hzl":"hzl","oth":"oth"};

function eyecolorsToJs(param) {
  return param;
}

function eyecolorsFromJs(param) {
  return _map[param];
}

var _map$1 = {"cm":"cm","inch":"in"};

var _revMap = {"cm":"cm","in":"inch"};

function heightUnitToJs(param) {
  return _map$1[param];
}

function heightUnitFromJs(param) {
  return _revMap[param];
}

var passportRules = [
  (function (passport) {
      var birth = Belt_Int.fromString(passport.byr);
      if (birth !== undefined && birth >= 1920) {
        return birth <= 2002;
      } else {
        return false;
      }
    }),
  (function (passport) {
      var iyr = Belt_Int.fromString(passport.iyr);
      if (iyr !== undefined && iyr >= 2010) {
        return iyr <= 2020;
      } else {
        return false;
      }
    }),
  (function (passport) {
      var eyr = Belt_Int.fromString(passport.eyr);
      if (eyr !== undefined && eyr >= 2020) {
        return eyr <= 2030;
      } else {
        return false;
      }
    }),
  (function (passport) {
      var match = passport.hgt.match(/^([0-9]+)(.*?)$/);
      if (match === null) {
        return false;
      }
      if (match.length !== 3) {
        return false;
      }
      var valueStr = match[1];
      var unit = match[2];
      var match$1 = Belt_Int.fromString(valueStr);
      var match$2 = heightUnitFromJs(unit);
      if (match$1 !== undefined && match$2 !== undefined) {
        if (match$2 === "cm") {
          if (match$1 >= 150) {
            return match$1 <= 193;
          } else {
            return false;
          }
        } else if (match$1 >= 59) {
          return match$1 <= 76;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }),
  (function (passport) {
      return /^#[0-9a-f]{6}$/.test(passport.hcl);
    }),
  (function (passport) {
      return eyecolorsFromJs(passport.ecl) !== undefined;
    }),
  (function (passport) {
      return /^[0-9]{9}$/.test(passport.pid);
    })
];

function parsePassport(str) {
  var entires = Belt_MapString.fromArray(Belt_Array.keepMap(str.split(/\s/), (function (pair) {
              var keyAndValue = Belt_Option.getWithDefault(pair, "").split(":", 2);
              if (keyAndValue.length !== 2) {
                return ;
              }
              var key = keyAndValue[0];
              var value = keyAndValue[1];
              return [
                      key,
                      value
                    ];
            })));
  var cid = Belt_MapString.get(entires, "cid");
  var match = Belt_MapString.get(entires, "byr");
  var match$1 = Belt_MapString.get(entires, "iyr");
  var match$2 = Belt_MapString.get(entires, "eyr");
  var match$3 = Belt_MapString.get(entires, "hgt");
  var match$4 = Belt_MapString.get(entires, "hcl");
  var match$5 = Belt_MapString.get(entires, "ecl");
  var match$6 = Belt_MapString.get(entires, "pid");
  if (match !== undefined && match$1 !== undefined && match$2 !== undefined && match$3 !== undefined && match$4 !== undefined && match$5 !== undefined && match$6 !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: {
              byr: match,
              iyr: match$1,
              eyr: match$2,
              hgt: match$3,
              hcl: match$4,
              ecl: match$5,
              pid: match$6,
              cid: cid
            }
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: ""
          };
  }
}

function validatePassport(passportResult) {
  if (passportResult.TAG !== /* Ok */0) {
    return false;
  }
  var passport = passportResult._0;
  return Belt_Array.every(passportRules, (function (rule) {
                return Curry._1(rule, passport);
              }));
}

function countPassport(passports) {
  return Belt_Array.keepMap(passports, (function (passportResult) {
                if (passportResult.TAG === /* Ok */0) {
                  return Caml_option.some(passportResult._0);
                }
                
              })).length;
}

var input = Fs.readFileSync(Process.cwd() + "/rescript/input/Week2/Year2020Day4.input.txt", "utf8");

var passports = Belt_Array.map(input.split("\n\n"), parsePassport);

var stepOneAnswer = countPassport(passports);

var stepTwoAnswer = Belt_Array.keep(passports, validatePassport).length;

console.log({
      stepOneAnswer: stepOneAnswer,
      stepTwoAnswer: stepTwoAnswer
    });

exports.eyecolorsToJs = eyecolorsToJs;
exports.eyecolorsFromJs = eyecolorsFromJs;
exports.heightUnitToJs = heightUnitToJs;
exports.heightUnitFromJs = heightUnitFromJs;
exports.passportRules = passportRules;
exports.parsePassport = parsePassport;
exports.validatePassport = validatePassport;
exports.countPassport = countPassport;
exports.input = input;
exports.passports = passports;
exports.stepOneAnswer = stepOneAnswer;
exports.stepTwoAnswer = stepTwoAnswer;
/* input Not a pure module */
