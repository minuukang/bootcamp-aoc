// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Process = require("process");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function parsePasswordRule(str) {
  var parts = str.split(" ");
  var rangeInt = Belt_Option.mapWithDefault(Belt_Array.get(parts, 0), [], (function (range) {
          return Belt_Array.map(range.split("-"), Belt_Int.fromString);
        }));
  var required = Belt_Option.mapWithDefault(Belt_Array.get(parts, 1), undefined, (function (rule) {
          return Belt_Array.get(rule.split(":"), 0);
        }));
  var password = Belt_Array.get(parts, 2);
  return {
          min: rangeInt[0],
          max: rangeInt[1],
          required: required,
          password: password
        };
}

function getSafePasswordRule(rule) {
  var m = rule.min;
  var min = m !== undefined ? m : Js_exn.raiseTypeError("min cannot be optional");
  var m$1 = rule.max;
  var max = m$1 !== undefined ? m$1 : Js_exn.raiseTypeError("max cannot be optional");
  var m$2 = rule.required;
  var required = m$2 !== undefined ? m$2 : Js_exn.raiseTypeError("required cannot be optional");
  var m$3 = rule.password;
  var password = m$3 !== undefined ? m$3 : Js_exn.raiseTypeError("required cannot be optional");
  return {
          min: min,
          max: max,
          required: required,
          password: password
        };
}

function validatePasswordOldRule(rule) {
  var match = getSafePasswordRule(rule);
  var required = match.required;
  var sizeOfRequired = Belt_Array.keep(match.password.split(""), (function ($$char) {
          return $$char === required;
        })).length;
  if (sizeOfRequired >= match.min) {
    return sizeOfRequired <= match.max;
  } else {
    return false;
  }
}

function validatePasswordNewRule(rule) {
  var match = getSafePasswordRule(rule);
  var password = match.password;
  var required = match.required;
  var matchMinRequired = password.charAt(match.min - 1 | 0) === required;
  var matchMaxRequired = password.charAt(match.max - 1 | 0) === required;
  if (matchMinRequired || matchMaxRequired) {
    return !(matchMinRequired && matchMaxRequired);
  } else {
    return false;
  }
}

var input = Fs.readFileSync(Process.cwd() + "/rescript/input/Week1/Year2020Day2.input.txt", "utf8");

var passwordRules = Belt_Array.map(input.split("\n"), parsePasswordRule);

var stepOneAnswer = Belt_Array.keep(passwordRules, validatePasswordOldRule).length;

var stepTwoAnswer = Belt_Array.keep(passwordRules, validatePasswordNewRule).length;

console.log({
      stepOneAnswer: stepOneAnswer,
      stepTwoAnswer: stepTwoAnswer
    });

exports.parsePasswordRule = parsePasswordRule;
exports.getSafePasswordRule = getSafePasswordRule;
exports.validatePasswordOldRule = validatePasswordOldRule;
exports.validatePasswordNewRule = validatePasswordNewRule;
exports.input = input;
exports.passwordRules = passwordRules;
exports.stepOneAnswer = stepOneAnswer;
exports.stepTwoAnswer = stepTwoAnswer;
/* input Not a pure module */
