// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Process = require("process");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

function parsePasswordRule(str) {
  var match = str.split(" ");
  if (match.length !== 3) {
    return ;
  }
  var rangeParts = match[0];
  var requiredParts = match[1];
  var password = match[2];
  var match$1 = Belt_Array.map(rangeParts.split("-"), Belt_Int.fromString);
  var match$2 = Belt_Array.get(requiredParts.split(":"), 0);
  if (match$1.length !== 2) {
    return ;
  }
  var min = match$1[0];
  if (min === undefined) {
    return ;
  }
  var max = match$1[1];
  if (max !== undefined && match$2 !== undefined) {
    return {
            min: min,
            max: max,
            required: match$2,
            password: password
          };
  }
  
}

function validatePasswordOldRule(rule) {
  var required = rule.required;
  var sizeOfRequired = Belt_Array.keep(rule.password.split(""), (function ($$char) {
          return $$char === required;
        })).length;
  if (sizeOfRequired >= rule.min) {
    return sizeOfRequired <= rule.max;
  } else {
    return false;
  }
}

function validatePasswordNewRule(rule) {
  var password = rule.password;
  var required = rule.required;
  var matchMinRequired = password.charAt(rule.min - 1 | 0) === required;
  var matchMaxRequired = password.charAt(rule.max - 1 | 0) === required;
  if (matchMinRequired || matchMaxRequired) {
    return !(matchMinRequired && matchMaxRequired);
  } else {
    return false;
  }
}

var input = Fs.readFileSync(Process.cwd() + "/rescript/input/Week1/Year2020Day2.input.txt", "utf8");

var passwordRules = Belt_Array.keepMap(input.split("\n"), parsePasswordRule);

var stepOneAnswer = Belt_Array.keep(passwordRules, validatePasswordOldRule).length;

var stepTwoAnswer = Belt_Array.keep(passwordRules, validatePasswordNewRule).length;

console.log({
      stepOneAnswer: stepOneAnswer,
      stepTwoAnswer: stepTwoAnswer
    });

exports.parsePasswordRule = parsePasswordRule;
exports.validatePasswordOldRule = validatePasswordOldRule;
exports.validatePasswordNewRule = validatePasswordNewRule;
exports.input = input;
exports.passwordRules = passwordRules;
exports.stepOneAnswer = stepOneAnswer;
exports.stepTwoAnswer = stepTwoAnswer;
/* input Not a pure module */
